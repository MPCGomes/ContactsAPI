openapi: 3.0.0
info:
  title: ContactsAPI
  version: 2.0.0
  description: This API allows you to manage a contact list with fields such as photoUrl, givenName, familyName, multiple phoneNumbers, emailAddresses, and events. Version 2 includes improvements and new features.

servers:
  - url: http://localhost:5500/api/v1
    description: V1 Server
  - url: http://localhost:5500/api/v2
    description: V2 Server

paths:
  /contacts:
    get:
      summary: Retrieve a list of contacts
      description: Retrieve a list of all contacts in the contact list.
      responses:
        "200":
          description: A list of contacts.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Contact"
              examples:
                contactList:
                  value: [
                    {
                      givenName: "Marcos",
                      familyName: "Gomes",
                      phoneNumbers: [{ value: "+00 00 00000-0000", type: "mobile" }],
                      emailAddresses: [{ value: "marcos.gomes@example.com", type: "home" }]
                    },
                    {
                      givenName: "Gomes",
                      familyName: "Marcos",
                      phoneNumbers: [{ value: "+00 00 000-000-0000", type: "mobile" }],
                      emailAddresses: [{ value: "gomes.marcos@example.com", type: "home" }]
                    }
                  ]
    post:
      summary: Add a new contact
      description: Add a new contact to the contact list.
      requestBody:
        description: The contact to create.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Contact"
            examples:
              newContact:
                value: {
                  givenName: "Marcos",
                  familyName: "Gomes",
                  phoneNumbers: [{ value: "+00 00 00000-0000", type: "mobile" }],
                  emailAddresses: [{ value: "marcos.gomes@example.com", type: "home" }]
                }
      responses:
        "201":
          description: Contact created successfully.
  /contacts/{contactId}:
    get:
      summary: Retrieve a single contact
      description: Retrieve a contact by its ID.
      parameters:
        - in: path
          name: contactId
          required: true
          schema:
            type: string
          description: The ID of the contact to retrieve.
      responses:
        "200":
          description: A single contact.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"
              examples:
                contact:
                  value: {
                    givenName: "Marcos",
                    familyName: "Gomes",
                    phoneNumbers: [{ value: "+00 00 00000-0000", type: "mobile" }],
                    emailAddresses: [{ value: "marcos.gomes@example.com", type: "home" }]
                  }
        "404":
          description: Contact not found.
    put:
      summary: Update an existing contact (V1)
      description: Update a contact by its ID.
      parameters:
        - in: path
          name: contactId
          required: true
          schema:
            type: string
          description: The ID of the contact to update.
      requestBody:
        description: The updated contact information.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Contact"
            examples:
              updatedContact:
                value: {
                  givenName: "Marcos",
                  familyName: "Gomes",
                  phoneNumbers: [{ value: "+00 00 0000-0000", type: "work" }],
                  emailAddresses: [{ value: "marcos.gomes@example2.com", type: "work" }]
                }
      responses:
        "200":
          description: Contact updated successfully.
        "404":
          description: Contact not found.
    patch:
      summary: Update an existing contact (V2)
      description: Update a contact by its ID.
      parameters:
        - in: path
          name: contactId
          required: true
          schema:
            type: string
          description: The ID of the contact to update.
      requestBody:
        description: The updated contact information.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Contact"
            examples:
              updatedContact:
                value: {
                  givenName: "Marcos",
                  familyName: "Gomes",
                  phoneNumbers: [{ value: "+00 00 0000-0000", type: "work" }],
                  emailAddresses: [{ value: "marcos.gomes@example2.com", type: "work" }]
                }
      responses:
        "200":
          description: Contact updated successfully.
        "404":
          description: Contact not found.
    delete:
      summary: Delete a contact
      description: Delete a contact by its ID.
      parameters:
        - in: path
          name: contactId
          required: true
          schema:
            type: string
          description: The ID of the contact to delete.
      responses:
        "204":
          description: Contact deleted successfully.
        "404":
          description: Contact not found.

components:
  schemas:
    Contact:
      type: object
      properties:
        photoUrl:
          type: string
          format: uri
          nullable: true
        givenName:
          type: string
        familyName:
          type: string
          nullable: true
        middleName:
          type: string
          nullable: true
        honorificPrefix:
          type: string
          nullable: true
        honorificSuffix:
          type: string
          nullable: true
        phoneticGivenName:
          type: string
          nullable: true
        phoneticMiddleName:
          type: string
          nullable: true
        phoneticFamilyName:
          type: string
          nullable: true
        nickname:
          type: string
          nullable: true
        fileAs:
          type: string
          nullable: true
        organizations:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              department:
                type: string
                nullable: true
              title:
                type: string
                nullable: true
        addresses:
          type: array
          items:
            type: object
            properties:
              streetAddress:
                type: string
              city:
                type: string
              region:
                type: string
              country:
                type: string
              postalCode:
                type: string
              type:
                type: string
        phoneNumbers:
          type: array
          items:
            type: object
            properties:
              value:
                type: string
              type:
                type: string
        emailAddresses:
          type: array
          items:
            type: object
            properties:
              value:
                type: string
              type:
                type: string
        events:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
              type:
                type: string
        urls:
          type: array
          items:
            type: object
            properties:
              value:
                type: string
              type:
                type: string
        relations:
          type: array
          items:
            type: object
            properties:
              person:
                type: string
              type:
                type: string
        imClients:
          type: array
          items:
            type: object
            properties:
              protocol:
                type: string
              username:
                type: string
        userDefined:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
              value:
                type: string
        biographies:
          type: array
          items:
            type: object
            properties:
              value:
                type: string
        occupations:
          type: array
          items:
            type: object
            properties:
              title:
                type: string
              company:
                type: string
        memberships:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
              domain:
                type: string
      required:
        - givenName
